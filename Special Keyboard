// Amazon Google Paytm Microsoft Flipkart

class Solution{
    static int optimalKeys(int N){
        if (N <= 6)
            return N;
        int[] screen = new int[N];

        int b; // To pick a breakpoint
        // Initializing the optimal lengths array for until 6 input strokes
        int n;
        for (n = 1; n <= 6; n++)
            screen[n - 1] = n;

        // Solve all subproblems in bottom manner
        for (n = 7; n <= N; n++) {
            screen[n - 1] = 0;

            // For any keystroke n, we need to loop from n-3 keystrokes back to 1 keystroke to find
            // a breakpoint 'b' after which we will have ctrl-a, ctrl-c and then only ctrl-v all the way.
            for (b = n - 3; b >= 1; b--) 
            {
                // if the breakpoint is at b'th keystroke then the optimal string would
                // have length (n-b-1)*screen[b-1];
                int curr = (n - b - 1) * screen[b - 1];
                if (curr > screen[n - 1])
                    screen[n - 1] = curr;
            }
        }
        return screen[N - 1];
    }
}
